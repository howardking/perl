1. 类结构
   package Coffee;
   # Put "require" statements in for all required, imported packages
   # Just add code here
   1; #terminate the package with the required 1;
================================================================================
2.   构造函数之bless函数
   bless YeReference [,classname]
   YeReference是对被“祝福”的对象的引用，classname是可选的，指定对象获取方法的包名， 其缺省值为当前包名。使类可继承时用classname
   对象和引用的区别：perl对象被bless和某类相关，引用和类无关，如果引用被bless，它将属于一个类，也便成了对象。
   对象和引用的共同点：bless的对象也是引用，和类相关的引用。
================================================================================
3. 构造函数定义
   sub new{
	my $this = {}; #Create an anonymous hash, and #self points to it.
   	bless $this;   #Connect the hash to the package Coffee.
	return $this;  #Return the reference to the hash.
   }
================================================================================
4. 使用
   push(@INC, 'pwd'); #将当前目录加到@INC中供寻找包时使用。
   use Coffee;        #使用类
   $cup = new Coffee; #创建对象
   可以使用其他形式调用构造函数：
   Coffee::new()   new为coffee类方法，不能支持继承。
   Coffee->new()   
   Coffee new()
  
   注意：
   （1）一定要在构造函数中初始化变量；
   （2）一定要用my函数在方法中创建变量；
   （3）一定不要在方法中使用local，除非真的想把变量传递给其它子程序；
   （4）一定不要在类模块中使用全局变量。
   （5）不要检查第一个参数：类的类型，否则不能用继承
   （6）使用两个参数形式的bless，使类可继承
   （7）不要使用普通的方法调用方式，用->，同样时为了继承
   （8）构造函数也可继承
================================================================================
5. 析构函数
   DESTROY：大写是因为此函数时自动调用的，一般不用用户调用。
   sub DESTROY{
	#Add code here.
   }
================================================================================
6. 变量
   实例变量、类变量
   sub new {	
	my $type = shift;
	my %parm = @_;
	my $this = {};
	$this->{'Name'} = $parm{'Name'};
	$this->[0] = $parm{'Name'};
	$this->{'x'} = $parm{'x'};
	$this->[1] = $parm{'x'};
	$this->{'y'} = $parm{'y'};
	$this->[1] = $parm{'y'};
	bless $this, $type;
   }
  
   使用：
       构造对象时，可以如下传递参数：$mug = Coffee::new('Name'=>'top', 'x'=>10, 'y'=>20);
   访问放下如下：
   print "Name=$mug->{'Name'}\n"; print "x=$mug->{'x'}\n";
================================================================================
7. 方法定义
   方法就是一个子程序，成员函数。方法的第一个参数为类名或引用的包名。
   静态方法：类方法。应用于整个类，所有对象。第一个参数为类名把类名字符串作为第一个参数。
   虚方法：第一个参数为对象的引用。通常把第一个参数(是引用)shift到变量self或this中，然后然后将该值作为普通的引用使用。

   sub nameLister{
	my $this = shift;
	my ($key, $value);
     	while (($key, $value)=each(%$this)){
		print "\t$key is $value.\n";
	}
   }
================================================================================
8. 方法的调用
   对象的引用：对虚方法。参数必须用括号扩起来。
   使用类名：对静态方法，限定了类，不能用于继承。
     使用:: Coffee::method;
     使用-> Coffee->method；
     使用其它类的方法：coffee->superclass::method()
   函数名 类或对象 参数表
     间接名值调用$methname = "setCoffeeType"; $cup->$methname('Instant');函数名替代
    间接引用调用 my $fnref = sub{$obj->method(@_)};
                 $fnref->(10,"fred"); =======>$obj->method(10, "fred");
================================================================================
9. 继承
   类方法通过@ISA数组继承，变量的继承必须明确设定。
================================================================================
10. 方法重载
===============================================================================
11. 运算符重载
    用符号+等代替定义函数add
    use overload "+"=> \&plus,
                 "-"=> \&minus,
                 "="=> \&equal; 每一个都是一个回调函数。
================================================================================
12. 使用tie重载数据结构
    
