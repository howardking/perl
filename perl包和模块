1. 包定义
   名字空间namespace：
   包定义 package mypack；
   my定义的变量不在包中。
========================================================================
2. 符号表
   包的变量和子程序存在符号表中。
   在程序中查找符号表可用数组%package::,package为符号表所属的包名。查到的时变量名。
   通常不许要亲自查找符号表。要查找通过%package::
   $pack::{$key}, @pack::{$key}。查到的变量名为引用，如果使用其值则${$pack::{$key}}
========================================================================
3. 包切换
   缺省包：main
   切换到缺省的包：package main;
   当前包：__PACKAGE__,不能用于“”中。
   调用者所在的包：caller()
   切换包：package pack1； $var = 26; 
           package pack2;  $var = 34;
=========================================================================
4. 包引用
   在一个包中可以引用其它包中变量或子程序，方法时在变量前面加上包名和一个单引号，或::如
   package mypack;
   $var = 26;
   package main;
   print ("$mypackage'var\n");
   在perl5中已经改为$mypack::var。
==========================================================================
5. 包的变量和函数
   系统变量：STDIN， STDOUT， STDERR和ARGV， %ENV， %INC，@INC， $ARGV和@ARGV不属于任何包，在任何地方调用也在main中起作用。
===========================================================================
6. 包的私有变量
   本质上没有私有变量，但是my变量块不在符号标中，只在包内可见，可用它定义私有数据。
===========================================================================
7. 模块定义
   集合了变量和子程序的部件称为程序模块。
   package ModuleName；
   require；把其他地方写好的程序包含进来。require不指定名字时，把$_作为文件名。
   运行时执行
===========================================================================
8. use：将模块导入你的Perl程序中使用use  Mymodule；编译时执行，相当于在BEGIN{}
   中执行。
   use strict：use Config编译环境存在%Config中，如Config{'osname'};
   use vars想使用全局变量，但又用了strict(使用my). use vars qw($file).

   

