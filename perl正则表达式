1. 正则表达式
   模式匹配，在字符串中寻找特定序列的字符
   指定模式：由斜线包含，/def/即模式def。
  匹配操作符=～、！～
   检查匹配是否成功
   =～字符串是否匹配模式，匹配则为真，没有则为假。！～不匹配为真，匹配为假。
============================================================================
2. 正则表达式的使用
   用于条件判断：
   if($question =~ /please/) {print ("Thank you\n")} 
   else {}
   grep:正则表达式只对简单变量匹配，如果是数组
   @a=～/abc/,则'2'=~/abc/。用grep(/abc/, @a);对数组的每个元素匹配。
   split(/abc/, $line)根据模式匹配分割字符串。
   
   模式匹配的3种类型：
    m//模式匹配,s///匹配并替换,tr///逐一替换，翻译
===========================================================================
3. 字符匹配
   +，*，？，. {}
   +：一个或多个相同的前导字符（模式）。
   *：匹配0个、1个或多个相同字符
   ?：匹配0个或1个该前一个字符
   .: 匹配除换行外的所有单个字符，通常与*合用.*所有任意数量字符，与前一个字符结合，可以不出先字符。相当与......
   匹配制定数目的字符
   {}指定所匹配字符的出现次数。如：/de{1,3}/匹配def，deef，deeef；/de{3}f/匹配deeeef； /de{3,}f/匹配不少于3个e在d和f之间；/de{0,3}/匹配不多于3个e在d和f之间。
============================================================================
4. 贪婪规则和懒惰规则
============================================================================
5. 选择：
   []匹配一组字符中的任一个。
   [^]表示除其中之外的所有字符。
   [0-9][a-z][A-Z]       [0-9a-zA-Z]
   字符“|”指定两个或多个选择来匹配模式。如：/def|ghi/匹配def或ghi
===========================================================================
6. 转义符和定界符
   模式中包含通常被看作特殊意义的字符，须在其前加斜线“\”。
   从\Q开始到\E间的字符为原始字符，无特殊含义。
   \d任意数字[0-9]            \D除数字外的任意字符[^0-9]
   \w任意单词字符[_0-9a-zA-Z] \W任意非单词字符[^_0-9a-zA-Z]
   \s空白[\r\t\n\f]           \S非空白[^\r\t\n\f]
 
   ^或\A仅匹配字符串首        $或\Z仅匹配字符串尾
   \b匹配单词边界             \B单词内部匹配
============================================================================
7. 模式重用
   当模式匹配相同的部分出现多次时，可用括号括起来，用\n来多次引用，以简化表达式。把匹配的值存起来以后再用，和+模式的重复不同。（里面的值是不变的）
============================================================================
8. 模式变量
============================================================================
9. 匹配选项
   g匹配所有可能的模式
   i忽略模式中的大小写
   m将待匹配的串视为多行，^符号匹配字符串起始或新的一行的起始；$符号匹配任意行的末尾。以下示例只匹配第一行为a，否则无匹配：
   $line = 'a
    b
    c';
   $line =~ /^(.*)$/m;
   
   s将待匹配串视为单行。可以匹配\n
      /a.*bc/s匹配字符串axxxxx \nxxxxbc,但/a.*bc/则不匹配该字符串。
   o仅只执行一次变量替换
     $var=1; $line = <STDIN>;
     while ($var<10) {$result = $line =~ /$var/o; $line=<STDIN>; $var++;}
     第一次匹配1，第二次值为2，但仍匹配1.
   x 忽略模式中的空白。格式清晰
     /\d{2} ([\W]) \d{2} \1\d{2}/x等价于/\d{2}([\W])\d{2}\1\d{2}/
==============================================================================
10. 匹配符号的优先级
    () 
    + * ? {}
    ^ $ \b \B
    |
==============================================================================
11. 扩展匹配模式
   (?<c>pattern),其中c是一个字符，pattern是起作用的模式或子模式。
   1_ (?:pattern)不存贮括号内的匹配内容
      括号内的自模式将存贮在内存中，此功能即取消存贮该括号内的匹配内容，如
      /(?:a|b|c)(d|e)f\1/中的\1表示已匹配的d或e，而不是a或b或c。
   2_ /(?option)pattern/内嵌模式选项
      通常模式选项置于其后，有四个选项：i、m、s、x可以内嵌使用，等价于/pattern/option     
      /(?i)[a-z]+/   =   /[a-z]+/i
   3_ (?#注释)模式注释
      PERL5中可以在模式中用?#来加注释，如：
      if ($string =~ /(?i)[a-z]{2,3})(?#match two or three alphabetic characters)/ {...}

   4_ (?)取消贪婪
      "a12b38b" /a.*b/全部匹配，当/a(.*?)b/时匹配a12b。
       同样有*?, +?, ??, {x}?, {x,}?, {x,y}?,
   5_  /pattern(?=string)/肯定的和否定的预见匹配 ?=?!
       匹配后面为string的模式，相反的，(?!string)匹配后面非string的模式，如：
       $string = "25abc8";
       $string =~ /abc(?=[0-9])/;
       $matched = $&; #$&为已匹配的模式，为abc，不是abc8
============================================================================
12. 替换操作
    s/pattern/replace/,将字符串中与pattern匹配的部分换成replace。替代字符串不是模式。如$string = "abc123def";
        $string =～ s/123/456/; #now $string = "abc456def";
    在替换部分可以使用模式变量$n, 如s/(\d+)/[$1]/,但在替换部分不支持模式的特殊字符，如{},*,+等，如s/abc/[def]/将把abc替换为[def]
    替换操作符的选项：g,i,m,o,s,x,e
    e替换字符串作为表达式。e选项把替换部分的字符串看作表达式，在替换之前先计算其值，如：
    $string = "0abc1";
    $string =~ s/[a-zA-Z]+/$& x 2/e; #now $string = "0abcabc1"
============================================================================
13. 翻译操作
   tr/string1/string2/
    把string1中的第一个字符替换为string2中的第一个字符，把string1中的第二个字符替换为string2中的第二个字符，一次类推。
    当string1比string2长时，其多余字符替换为string2的最后一个字符，当string1中同一个字符多次出现时，将使用第一个替换字符。
    翻译操作符的选项：c翻译所有未指定字符，d删除所有指定的字符，s把多个相同的输出字符缩成一个。
=============================================================================
14. 模式定界符
    模式定界符为斜线/，但其可用字母m自行指定，如：
       m!/u/iqpublic/perl/prog1! 等价于 /\/u\/jqpublic\/perl\/prog1/
    当用字符'作为定界符时，不做变量替换；当用特殊字符作为定界符时，其转义功能或特殊功能即不能使用。成对的符号必须成对的使用。
    quotemeta('ab') = \a\b 自动加反斜杠
=============================================================================
15. 模式中使用变量
=============================================================================
补充
   抽取某一范围的行，如2-4行。模式之间的行输出。
   open(F, "tt.txt");
   while(<F>){
       print if(/if/../hi/);#或者if(2..4)为2到4行。
   }

   close(F);
   当第一个模式匹配时为真，以后不改变真值，直到遇到第二个模式为真时停止。
   使用if(/if/.../hi/)时，遇到第一个if时，再到下面的行找hi。而..遇到if时，现在本行找hi，找到就结束。
   \G 定位在最后匹配的位置。
